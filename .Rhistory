library(ggplot2)
require(gdata)
bk <- read.xls("rollingsales_manhattan.xls",pattern="BOROUGH")
head(bk)
summary(bk)
bk$sale.price.n <- as.numeric(gsub("[^[:digit:]]","",bk$SALE.PRICE))
bk$units <- as.numeric(bk$total.units)
count(is.na(bk$sale.price.n))
names(bk) <- tolower(names(bk))
## clean/format the data with regular expressions
bk$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",bk$gross.square.feet))
bk$land.sqft <- as.numeric(gsub("[^[:digit:]]","",bk$land.square.feet))
bk$sale.date <- as.Date(bk$sale.date)
bk$year.built <- as.numeric(as.character(bk$year.built))
bk$units <- as.numeric(bk$total.units)
bk.cheap.places = subset(bk,`sale.price.n`<1e7)
hist(bk.cheap.places$`sale.price.n`,col="green",breaks=50)
plot(bk$units,bk$sale)
plot(bk$sale.price.n,bk$units)
plot(bk$units,bk$sale.price.n)
plot(bk$units,bk$zip.code) //units with price
plot(bk$units,bk$zip.code) #units with price
bk.SP0 <- subset(bk,`zip.code`>0)
bk <- bk.SP0
plot(bk$units,bk$zip.code) #units with price
ggplot(bk, aes(x=zip.code, fill=units)) + geom_histogram(binwidth=1)
View(bk)
plot(bk$zip.code, bk$sale.price.n)
barplot(table(bk$zip.code),col='blue',main="Zip Code")
ggplot(bk, aes(x=bk$sale.price.n, colour=agecat)) + geom_density()
ggplot(bk, aes(x=bk$sale.price.n, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$sale.price.n, colour=bk$zip.code)) + geom_density()
ggplot(bk, aes(x=bk$sale.price.n, colour=bk$year.built)) + geom_density()
ggplot(bk, aes(x=bk$gross.sqft, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$zip.code, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$building.class.category, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$building.class.at.time.of.sale, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$building.class.at.time.of.sale, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$sale.price.n, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$sale.price.n, colour=bk$neighborhood)) + geom_density()
ggplot(bk, aes(x=bk$gross.sqft, colour=bk$neighborhood)) + geom_density()
plot(bk$neighborhood, bk$sale.price.n) #sale price with zipcode
ggplot(bk, aes(x=bk$neighborhood, colour=bk$zip.code)) + geom_density()
gross.sqft
ggplot(bk, aes(x=bk$neighborhood, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$gross.square.feet)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$building.class.category)) + geom_density()
ggplot(bk, aes(x=bk$neighborhood, colour=bk$units)) + geom_density()
barplot(table(bk$neighborhood),col='blue',main="N")
ggplot(bk, aes(x=bk$neighborhood, colour=log(bk$units)) + geom_density() #not working
ggplot(bk, aes(x=log(bk$neighborhood), colour=bk$units) + geom_density() #not working
ggplot(bk, aes(x=log(bk$neighborhood), colour=bk$units) + geom_density() #not working
View(bk)
View(bk)
b1 <- read.xls("rollingsales_manhattan.xls",pattern="BOROUGH")
b2 <- read.xls("rollingsales_queens.xls",pattern="BOROUGH")
b3 <- read.xls("rollingsales_brooklyn.xls",pattern="BOROUGH")
b4 <- read.xls("rollingsales_statenisland.xls",pattern="BOROUGH")
b5 <- read.xls("rollingsales_bronx.xls",pattern="BOROUGH")
b <- rbind(b1,b2,b3,b4,b5)
dim(b)
View(b)
View(b2)
bk <- b
head(bk)
summary(bk)
bk$sale.price.n <- as.numeric(gsub("[^[:digit:]]","",bk$SALE.PRICE))
count(is.na(bk$sale.price.n))
names(bk) <- tolower(names(bk))
## clean/format the data with regular expressions
bk$gross.sqft <- as.numeric(gsub("[^[:digit:]]","",bk$gross.square.feet))
bk$land.sqft <- as.numeric(gsub("[^[:digit:]]","",bk$land.square.feet))
bk$sale.date <- as.Date(bk$sale.date)
bk$year.built <- as.numeric(as.character(bk$year.built))
bk$units <- as.numeric(bk$total.units)
bk.SP0 <- subset(bk,`zip.code`>0)
bk <- bk.SP0
attach(bk)
#zip code with units
ggplot(bk, aes(x=zip.code, fill=units)) + geom_histogram(binwidth=1)
#
bk.cheap.places = subset(bk,`sale.price.n`<1e7)
hist(bk.cheap.places$`sale.price.n`,col="green",breaks=50)
rug(bk.cheap.places$`sale.price.n`) # adds "rug" underneath with data points
abline(v=median(bk.cheap.places$`sale.price.n`),col='magenta',lwd=2) # adds vertical line at median location
# make barplot
barplot(table(bk$building.class.category),col='blue',main="Building class category")
t <- unique(bk$building.class.category)
axis(side = 1, at = t)
plot(bk$units,bk$zip.code) #units with zipcode
plot(bk$zip.code, bk$sale.price.n) #sale price with zipcode
ggplot(bk, aes(x=bk$zip.code, colour=bk$sale.price.n)) + geom_density() #zip/ sale price
ggplot(bk, aes(x=bk$neighborhood, colour=bk$units) + geom_density() #not working
ggplot(bk, aes(x=bk$neighborhood, colour=bk$units)) + geom_density() #not working
ggplot(bk, aes(x=bk$neighborhood, colour=bk$units)) + geom_density() #not working
bk.sale <- bk[bk$sale.price.n!=0,]
plot(bk.sale$gross.sqft,bk.sale$sale.price.n)
ggplot(bk, aes(x=bk$borough, colour=bk$units)) + geom_density() #not working
ggplot(bk, aes(x=bk$borough, colour=bk$sale.price.n)) + geom_density() #not working
ggplot(bk, aes(x=bk$neighborhood, colour=bk$sale.price.n)) + geom_density()
ggplot(bk, aes(x=bk$gross.sqft, colour=bk$borough)) + geom_density()
ggplot(bk, aes(x=bk$borough, colour=bk$gross.sqft)) + geom_density()
ggplot(bk, aes(x=bk$zip.code, colour=bk$sale.price.n)) + geom_density()
View(bk)
plot(bk$borough, bk$gross.sqft)
plot(bk$borough, bk$gross.sqft)
plot(bk$borough, bk$sale.price.n) #?
plot(bk$borough, bk$sale.price.n) #?
hist(borough[sale.price.n<1e6])])
hist(borough[sale.price.n<1e6])
ggplot(bk, aes(x=borough, fill=units)) + geom_histogram(binwidth=1)
ggplot(bk, aes(x=zip.code, fill=units)) + geom_histogram(binwidth=1)
install.packages("shiny")
library(shiny)
library(shiny)
runExample("01_hello")
install.packages("tm")
install.packages("Snowball")
library(tm)
library(streamR)
install.packages(("streamR", "RCurl", "ROAuth", "RJSONIO"))
install.packages(("streamR")
library(streamR)
install.packages("streamR")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey,
consumerSecret = consumerSecret,
requestURL = requestURL,
accessURL = accessURL,
authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
library(ROAuth)
install.packages("ROAuth")
library(ROAuth)
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
library(streamR)
load("my_oauth.Rdata")
filterStream(file.name = "tweetsfb.json", track = c("Trump", "Hillary Clinton", "Obama"), language = "en",timeout = 60, oauth = my_oauth) # Use my_oauth file as the OAuth credentials
tweets.df
tweets
load("my_oauth.Rdata")
filterStream(file.name = "tweetsfb.json", track = c("Trump", "Hillary Clinton", "Obama"), language = "en",timeout = 60, oauth = my_oauth) # Use my_oauth file as the OAuth credentials
tweets.df <- parseTweets("tweetsfb.json", simplify = FALSE) # parse the json file and save to a data frame called tweets.df. Simplify = FALSE ensures that we include lat/lon information in that data frame.
tweets
tweets.df
View(tweets.df)
history
library(streamR)
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages("RCurl")
install.packages(bitops)
install.packages("bitops")
install.packages("bitops")
install.packages("rjson")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
install.packages("streamR")
install.packages("ROAuth")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
### STOP HERE!!! ###
# PART 2: Save the my_oauth data to an .Rdata file
save(my_oauth, file = "my_oauth.Rdata")
install.packages("streamR")
install.packages("ROAuth")
install.packages("ROAuth")
install.packages("streamR")
install.packages("ROAuth")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
### STOP HERE!!! ###
# PART 2: Save the my_oauth data to an .Rdata file
save(my_oauth, file = "my_oauth.Rdata")
install.packages("streamR")
install.packages("ROAuth")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
install.packages("streamR")
install.packages("ROAuth")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
install.packages("ROAuth")
install.packages("streamR")
install.packages("streamR")
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth.Rdata")
my_oauth.Rdata
load(my_outh.Rdata)
save(my_oauth, file = "my_oauth.Rdata")
save(my_oauth, file = "my_oauth1.Rdata")
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth2.Rdata")
load("~/my_oauth2.Rdata")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
load('Users/falgunibharadwaj/my_oauth2.Rdata')
/Users/falgunibharadwaj/my_oauth2.Rdata
load('Users/falgunibharadwaj/my_oauth2.Rdata')
load('Users\\falgunibharadwaj\\my_oauth2.Rdata')
load("~/my_oauth2.Rdata")
load('~/my_oauth2.Rdata')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
install("doBy")
library(doBy)
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
library(ggplot2)
require(gdata)
library(streamR)
library(ggplot2)
library(grid)
library(ROAuth)
library(dplyr)
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
install.packages("streamR")
install.packages("ROAuth")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
# PART 2: Save the my_oauth data to an .Rdata file
save(my_oauth, file = "my_oauth2.Rdata")
install.packages("streamR")
install.packages("ROAuth")
install.packages("ROAuth")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
save(my_oauth, file = "my_oauth2.Rdata")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth2.Rdata")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
options(shiny.error=browser)
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
options(shiny.error = browser)
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
install.packages("streamR")
library(streamR)
library(RCurl)
library(RJSONIO)
library(stringr)
# PART 1: Declare Twitter API Credentials & Create Handshake
library(ROAuth)
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "rLRzWovMR2lGDrw4gQywpCYi2" # From dev.twitter.com
consumerSecret <- "XEjkkB2qiOaGeKwDTFcFUaSwSk0ALTk8QNIRKGklbm1Eosk9oR" # From dev.twitter.com
my_oauth <- OAuthFactory$new(consumerKey = consumerKey, consumerSecret = consumerSecret,requestURL = requestURL, accessURL = accessURL, authURL = authURL)
my_oauth$handshake(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl"))
save(my_oauth, file = "my_oauth2.Rdata")
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
options(shiny.error = recover)
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
shiny::runApp('Desktop/CSE 587 DIC/falgunib_PA1/falgunib_Prob5')
